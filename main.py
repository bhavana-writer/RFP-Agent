import writer as wf
from app.services.google_trends_service import GoogleTrendsService
from writerai import Writer
import json
from dotenv import load_dotenv
import os
from app.config import settings
from app.services.salesforce_service import SalesforceService
from app.services.slack_service import post_canvas_message
import requests
import logging

# Initialize logger
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)



# Load environment variables from .env file
load_dotenv(override=True)

# Base URL for the application
print(f"Base URL initialized: {settings.BASE_URL}")


# This is a placeholder to get you started or refresh your memory.
# Delete it or adapt it as necessary.
# Documentation is available at https://dev.writer.com/framework

# Shows in the log when the app starts
print("Hello world!")

#Workflow configuration
wf.Config.feature_flags = ["workflows", "custom_block_icons"]

base_url = settings.BASE_URL
writer_abm_app_id = "3d099a02-7089-4ef2-9189-168e2af29edc"
writer_sales_summary_app_id = "10531b49-35a9-4dc0-8517-a67d4a08a19d"
transcript_graph_id="6940e9ca-903f-46cf-8129-26f4812d0c43"

# "_my_private_element" won't be serialised or sent to the frontend,
# because it starts with an underscore

# Initialize the application state
state = wf.init_state({
    "my_app": {"title": "AI Workflow"},
    "accounts": {},  # Preloaded accounts
    "selected_account_id": None,  # Tracks the ID of the selected account
    "base_url": base_url,  # Set Base URL in the state
    "account_name": "",  # Name of the selected account
    "account_api_url": "",  # API URL for fetching account data
    "account_search_api_url": f"{base_url}/",  # API URL for searching news
    "sf_account_data": "",  # Data for the selected account
    "kg_api_url": f"{base_url}/kg-question",  # URL for Knowledge Graph API
    "create_canvas_url": f"{base_url}/create-account-briefing",  # URL for creating a Salesforce Canvas app
    "kg_data": "",  # Data from the Knowledge Graph API
    "combined_account_data": "",  # Combined data from Salesforce and Knowledge Graph
    "executive_summary": "",  # Executive summary of the combined data
    "writer_abm_app_id": writer_abm_app_id,  # Writer app ID for ABM content
    "writer_sales_summary_app_id": writer_sales_summary_app_id,  # Writer app ID for Sales Summary content
    "transcript_graph_id": transcript_graph_id,  # Graph ID for the transcript
    "transcript_url": f"{base_url}/api/v1/writer/question-graph",  # URL for the transcript
    "abm_content": "",  # ABM content generated by Writer

})


def preload_accounts(state):
    """
    Fetch all accounts from Salesforce and store them in the state as { "account_id": "account_name" }.
    """
    print("Handler: preload_accounts | Start")
    try:
        # Initialize SalesforceService
        salesforce_service = SalesforceService()

        # Fetch all accounts
        query = "SELECT Id, Name FROM Account"
        results = salesforce_service.sf.query_all(query)

        # Parse results into the required format
        accounts_dict = {account["Id"]: account["Name"] for account in results["records"]}

        # Store the parsed accounts in the state
        state["accounts"] = accounts_dict
        print(f"Handler: preload_accounts | Loaded {len(accounts_dict)} accounts")

    except Exception as e:
        state["accounts"] = {}
        print(f"Error in preload_accounts: {e}")

    print("Handler: preload_accounts | End")


def handle_selection(state, payload):
    """
    Updates the state with the selected account ID, account name, and relevant URLs.
    """
    print("Payload received:", payload)

    # Extract selected_account_id from payload
    if isinstance(payload, str):
        selected_account_id = payload
    elif isinstance(payload, dict):
        selected_account_id = payload.get("selected_account_id")
    else:
        print(f"Unexpected payload type: {type(payload)}. Exiting handler.")
        return  # Exit early for invalid payloads

    print(f"Handler: handle_selection | Selected Account ID: {selected_account_id}")

    # Retrieve account name using selected_account_id
    try:
        account_name = state["accounts"][selected_account_id]
    except KeyError:
        print(f"Account ID {selected_account_id} not found in preloaded accounts.")
        return

    state["selected_account_id"] = selected_account_id
    state["account_name"] = account_name

    # Ensure Base URL is set
    base_url = state["base_url"] if "base_url" in state else None
    if not base_url:
        print("Base URL is not set in state. Exiting handler.")
        return  # Exit gracefully if Base URL is unavailable

    # Update API URLs based on selected account
    state["account_api_url"] = f"{base_url}/api/v1/salesforce/account/{selected_account_id}"
    state["account_search_api_url"] = f"{base_url}/api/v1/tavily/search-news/{account_name.replace(' ', '%20')}"

    # Logging updates
    print("State Updated:")
    print(f"  - selected_account_id = {state['selected_account_id']}")
    print(f"  - account_name = {state['account_name']}")
    print(f"  - account_api_url = {state['account_api_url']}")
    print(f"  - account_search_api_url = {state['account_search_api_url']}")
    print(state)

def send_multiple_canvas_urls():
    """
    Sends two Canvas URLs to a specified Slack channel.
    """
    channel_id = "C08476AM146"
    canvas_urls = [
        "https://writerai.slack.com/docs/T02AJRK99/F084ZCPM6M6",
        "https://writerai.slack.com/docs/T02AJRK99/F084G721PGB"
    ]
    
    for canvas_url in canvas_urls:
        response = post_canvas_message(canvas_url, channel_id)
        if "error" in response:
            logger.error(f"Failed to send canvas URL: {canvas_url}, Error: {response['error']}")
        else:
            logger.info(f"Successfully sent canvas URL: {canvas_url}")

def search_and_fetch_account_data(search_term):
    """
    Search for a Salesforce account using a search term and fetch detailed account data.
    """
    logger.info("Handler: search_and_fetch_account_data | Start")
    salesforce_service = SalesforceService()
    try:
        # Search for accounts
        logger.info(f"Searching for accounts with term: '{search_term}'")
        accounts = salesforce_service.search_accounts(search_term)
        if not accounts:
            logger.warning(f"No accounts found for search term: '{search_term}'")
            return None
        
        # Display matching accounts
        logger.info(f"Found {len(accounts)} account(s):")
        for idx, account in enumerate(accounts, start=1):
            logger.info(f"{idx}. Account Name: {account['Name']} | ID: {account['Id']}")

        # Fetch details for the first account
        selected_account_id = accounts[0]['Id']
        logger.info(f"Fetching data for Account ID: {selected_account_id}")
        account_data = salesforce_service.get_account_data(selected_account_id)
        
        if account_data:
            logger.info("Successfully fetched account data.")
            return account_data
        else:
            logger.warning(f"Failed to fetch data for Account ID: {selected_account_id}")
            return None
    except Exception as e:
        logger.error(f"Error in search_and_fetch_account_data: {e}")
        return None
    finally:
        logger.info("Handler: search_and_fetch_account_data | End")
def search_account_and_create_task(state, search_term, task_subject, task_status="Not Started", task_date=None):
    """
    Search for an account by name, retrieve the ID, and create a task for it.

    :param state: Application state.
    :param search_term: Search term for the account name.
    :param task_subject: Subject of the task to be created.
    :param task_status: Status of the task.
    :param task_date: Task activity date in YYYY-MM-DD format.
    """
    print("Handler: search_account_and_create_task | Start")

    try:
        # Initialize SalesforceService
        salesforce_service = SalesforceService()

        # Search for accounts matching the search term
        accounts = salesforce_service.search_accounts(search_term)
        if not accounts:
            print(f"No accounts found for search term: {search_term}")
            return

        # Use the first matching account
        account = accounts[0]
        account_id = account["Id"]
        account_name = account["Name"]
        print(f"Found Account: {account_name} (ID: {account_id})")

        # Create a task for the account
        result = salesforce_service.create_task_for_account(
            account_id=account_id,
            subject=task_subject,
            status=task_status,
            activity_date=task_date
        )

        if result:
            print(f"Task created successfully for account {account_name}: {result}")
            state["task_creation_status"] = f"Task created for account '{account_name}'"
        else:
            print(f"Failed to create task for account '{account_name}'")
            state["task_creation_status"] = f"Failed to create task for account '{account_name}'"

    except Exception as e:
        print(f"Error in search_account_and_create_task: {e}")
        state["task_creation_status"] = f"Error: {str(e)}"

    print("Handler: search_account_and_create_task | End")

def search_account_and_add_note(state, search_term, note_title, note_body):
    """
    Search for an account by name, retrieve the ID, and add a note to it.

    :param state: Application state.
    :param search_term: Search term for the account name.
    :param note_title: Title of the note.
    :param note_body: Content of the note.
    """
    print("Handler: search_account_and_add_note | Start")

    try:
        # Initialize SalesforceService
        salesforce_service = SalesforceService()

        # Search for accounts matching the search term
        accounts = salesforce_service.search_accounts(search_term)
        if not accounts:
            print(f"No accounts found for search term: {search_term}")
            return

        # Use the first matching account
        account = accounts[0]
        account_id = account["Id"]
        account_name = account["Name"]
        print(f"Found Account: {account_name} (ID: {account_id})")

        # Add a note to the account
        result = salesforce_service.add_note_to_account(
            account_id=account_id,
            title=note_title,
            body=note_body
        )

        if result:
            print(f"Note added successfully for account {account_name}: {result}")
            state["note_creation_status"] = f"Note added to account '{account_name}'"
        else:
            print(f"Failed to add note for account '{account_name}'")
            state["note_creation_status"] = f"Failed to add note to account '{account_name}'"

    except Exception as e:
        print(f"Error in search_account_and_add_note: {e}")
        state["note_creation_status"] = f"Error: {str(e)}"

    print("Handler: search_account_and_add_note | End")

# Preload accounts during initialization
preload_accounts(state)
print("Preloaded accounts:", state["accounts"])
